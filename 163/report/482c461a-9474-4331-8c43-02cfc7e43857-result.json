{"name": "测试接收邮件用例", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=127.0.6533.72)\nStacktrace:\n\tGetHandleVerifier [0x00007FF674D69632+30946]\n\t(No symbol) [0x00007FF674D1E3C9]\n\t(No symbol) [0x00007FF674C16E09]\n\t(No symbol) [0x00007FF674C5DE39]\n\t(No symbol) [0x00007FF674C8CA6A]\n\t(No symbol) [0x00007FF674C5BBB6]\n\t(No symbol) [0x00007FF674C8CC80]\n\t(No symbol) [0x00007FF674CAB041]\n\t(No symbol) [0x00007FF674C8C813]\n\t(No symbol) [0x00007FF674C5A6E5]\n\t(No symbol) [0x00007FF674C5B021]\n\tGetHandleVerifier [0x00007FF674E9F83D+1301229]\n\tGetHandleVerifier [0x00007FF674EABDB7+1351783]\n\tGetHandleVerifier [0x00007FF674EA2A03+1313971]\n\tGetHandleVerifier [0x00007FF674D9DD06+245686]\n\t(No symbol) [0x00007FF674D2758F]\n\t(No symbol) [0x00007FF674D23804]\n\t(No symbol) [0x00007FF674D23992]\n\t(No symbol) [0x00007FF674D1A3EF]\n\tBaseThreadInitThunk [0x00007FFABA49257D+29]\n\tRtlUserThreadStart [0x00007FFABA84AF28+40]", "trace": "self = <testcase.test_send_email.TestEmail object at 0x0000014562C28B50>\n\n    def setup_method(self):\n        self.driver = webdriver.Chrome()\n        self.driver.maximize_window()\n        self.driver.get(\"https://mail.163.com/\")\n        self.login_page = LoginPage(self.driver)\n        self.index_page = IndexPage(self.driver)\n        # 进入登录的iframe框架\n        self.login_page.switch_to_frame_login()\n        # 登录，输入账号密码\n>       self.login_page.login(\"15703070836\", \"Hm12012326\")\n\ntestcase\\test_send_email.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects\\login_page.py:28: in login\n    self.input_text(email, *self.email_loc)\ncommon\\BaseView.py:40: in input_text\n    el.clear()\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:117: in clear\n    self._execute(Command.CLEAR_ELEMENT)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000014562CA5430>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF674D1A3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFABA49257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFABA84AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=127.0.6533.72)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF674D69632+30946]\nE       \t(No symbol) [0x00007FF674D1E3C9]\nE       \t(No symbol) [0x00007FF674C16E09]\nE       \t(No symbol) [0x00007FF674C5DE39]\nE       \t(No symbol) [0x00007FF674C8CA6A]\nE       \t(No symbol) [0x00007FF674C5BBB6]\nE       \t(No symbol) [0x00007FF674C8CC80]\nE       \t(No symbol) [0x00007FF674CAB041]\nE       \t(No symbol) [0x00007FF674C8C813]\nE       \t(No symbol) [0x00007FF674C5A6E5]\nE       \t(No symbol) [0x00007FF674C5B021]\nE       \tGetHandleVerifier [0x00007FF674E9F83D+1301229]\nE       \tGetHandleVerifier [0x00007FF674EABDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF674EA2A03+1313971]\nE       \tGetHandleVerifier [0x00007FF674D9DD06+245686]\nE       \t(No symbol) [0x00007FF674D2758F]\nE       \t(No symbol) [0x00007FF674D23804]\nE       \t(No symbol) [0x00007FF674D23992]\nE       \t(No symbol) [0x00007FF674D1A3EF]\nE       \tBaseThreadInitThunk [0x00007FFABA49257D+29]\nE       \tRtlUserThreadStart [0x00007FFABA84AF28+40]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "start": 1721976726914, "stop": 1721976726914, "uuid": "7971d1a3-168e-4dc0-a16f-3702f518fdcf", "historyId": "58f4224205d7d500b9781923d9c02f64", "testCaseId": "58f4224205d7d500b9781923d9c02f64", "fullName": "testcase.test_send_email.TestEmail#test_01_receive_mail", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_send_email"}, {"name": "subSuite", "value": "TestEmail"}, {"name": "host", "value": "DESKTOP-1O1SVHE"}, {"name": "thread", "value": "40368-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_send_email"}]}