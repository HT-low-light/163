{"name": "测试登录用例", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=126.0.6478.183)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7E795EEB2+31554]\n\t(No symbol) [0x00007FF7E78D7EE9]\n\t(No symbol) [0x00007FF7E779872A]\n\t(No symbol) [0x00007FF7E776D995]\n\t(No symbol) [0x00007FF7E78144D7]\n\t(No symbol) [0x00007FF7E782C051]\n\t(No symbol) [0x00007FF7E780CDD3]\n\t(No symbol) [0x00007FF7E77DA33B]\n\t(No symbol) [0x00007FF7E77DAED1]\n\tGetHandleVerifier [0x00007FF7E7C68B2D+3217341]\n\tGetHandleVerifier [0x00007FF7E7CB5AF3+3532675]\n\tGetHandleVerifier [0x00007FF7E7CAB0F0+3489152]\n\tGetHandleVerifier [0x00007FF7E7A0E786+750614]\n\t(No symbol) [0x00007FF7E78E376F]\n\t(No symbol) [0x00007FF7E78DEB24]\n\t(No symbol) [0x00007FF7E78DECB2]\n\t(No symbol) [0x00007FF7E78CE17F]\n\tBaseThreadInitThunk [0x00007FFABA49257D+29]\n\tRtlUserThreadStart [0x00007FFABA84AF28+40]", "trace": "self = <testcase.test_login.TestLogin object at 0x0000017E2445F5E0>, param = {'password': 'Zh01071126', 'username': '13272565341'}\n\n    @allure.title(\"测试登录用例\")\n    @pytest.mark.parametrize(\"param\", get_json_data(BASE_DIR + '/testdatas/login_data.json'))\n    def test_01_login_success(self, param):\n        # 进入登录的iframe框架\n        self.login_page.switch_to_frame_login()\n        # 登录，输入账号，密码\n        self.login_page.login(param['username'], param['password'])\n        sleep(3)\n        self.driver.switch_to.default_content()\n>       text = self.index_page.get_index_text()\n\ntestcase\\test_login.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects\\index_163_page.py:83: in get_index_text\n    text = self.print_text(*self.index_loc)\ncommon\\BaseView.py:50: in print_text\n    el = self.find_element(*loc).text\ncommon\\BaseView.py:19: in find_element\n    element = wait.until(lambda x: x.find_element(*loc))\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\ncommon\\BaseView.py:19: in <lambda>\n    element = wait.until(lambda x: x.find_element(*loc))\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017E24476DF0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7E78CE17F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFABA49257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFABA84AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=126.0.6478.183)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7E795EEB2+31554]\nE       \t(No symbol) [0x00007FF7E78D7EE9]\nE       \t(No symbol) [0x00007FF7E779872A]\nE       \t(No symbol) [0x00007FF7E776D995]\nE       \t(No symbol) [0x00007FF7E78144D7]\nE       \t(No symbol) [0x00007FF7E782C051]\nE       \t(No symbol) [0x00007FF7E780CDD3]\nE       \t(No symbol) [0x00007FF7E77DA33B]\nE       \t(No symbol) [0x00007FF7E77DAED1]\nE       \tGetHandleVerifier [0x00007FF7E7C68B2D+3217341]\nE       \tGetHandleVerifier [0x00007FF7E7CB5AF3+3532675]\nE       \tGetHandleVerifier [0x00007FF7E7CAB0F0+3489152]\nE       \tGetHandleVerifier [0x00007FF7E7A0E786+750614]\nE       \t(No symbol) [0x00007FF7E78E376F]\nE       \t(No symbol) [0x00007FF7E78DEB24]\nE       \t(No symbol) [0x00007FF7E78DECB2]\nE       \t(No symbol) [0x00007FF7E78CE17F]\nE       \tBaseThreadInitThunk [0x00007FFABA49257D+29]\nE       \tRtlUserThreadStart [0x00007FFABA84AF28+40]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "parameters": [{"name": "param", "value": "{'username': '13272565341', 'password': 'Zh01071126'}"}], "start": 1721894964607, "stop": 1721894969428, "uuid": "a674bcdd-4bb2-430f-a4f1-d0433837134e", "historyId": "15cb6efa385283f92f5ee3e77496661b", "testCaseId": "2ecb0dd6018aa1d866419ab000fb6de2", "fullName": "testcase.test_login.TestLogin#test_01_login_success", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-1O1SVHE"}, {"name": "thread", "value": "34056-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_login"}]}